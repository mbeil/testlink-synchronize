/*
 * File: TestLinkInfo.java
 *
 * Copyright (c) 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * last modified: Friday, June 29, 2012 (22:59) by: Matthias Beil
 */
package de.eimb.testlink.synchronize.citrus;

import java.net.URL;

import java.util.Map;
import java.util.Map.Entry;

import br.eti.kinoshita.testlinkjavaapi.TestLinkAPI;
import br.eti.kinoshita.testlinkjavaapi.model.Build;
import br.eti.kinoshita.testlinkjavaapi.model.TestCase;
import br.eti.kinoshita.testlinkjavaapi.model.TestPlan;
import br.eti.kinoshita.testlinkjavaapi.model.TestProject;
import br.eti.kinoshita.testlinkjavaapi.model.TestSuite;

/**
 * Application class to get all info's for a test link connection. Application must be called using
 * two arguments. The first is the URL to the XML RPC of TestLink. This URL is build up using the link
 * to TestLink and adding {@code /lib/api/xmlrpc.php}- The second parameter is the development key for
 * the desired user. This development key must be generated by TestLink. TestLink has to configured
 * for this.
 *
 * @author Matthias Beil
 * @since TestLink-Synchronize 1.0.0
 */
public final class TestLinkInfo {

    // ~ Static fields/initializers --------------------------------------------------------------

    /** DEFAULT_INDENT. */
    private static final String DEFAULT_INDENT = "  ";

    // ~ Constructors ----------------------------------------------------------------------------

    /**
     * Constructor for {@code TestLinkInfo} class.
     */
    public TestLinkInfo() {

        super();
    }

    // ~ Methods ---------------------------------------------------------------------------------

    /**
     * Main application execution method.
     *
     * @param args
     *            Command line arguments.
     */
    public static void main(final String[] args) {

        // final String url = "http://localhost/testlink/lib/api/xmlrpc.php";
        // final String devKey = "3302eca5352468675644fd83c8c37b4b";
        TestLinkAPI api = null;
        URL testlinkURL = null;

        try {

            testlinkURL = new URL(args[0]);
            api = new TestLinkAPI(testlinkURL, args[1]);

            final StringBuilder builder = new StringBuilder("\n");
            builder.append(api);
            builder.append("\n");
            builder.append(api.about());
            builder.append("\n\n");

            TestLinkInfo.addProjects(builder, api, TestLinkInfo.DEFAULT_INDENT);

            System.out.println(builder.toString());
        } catch (final Exception ex) {

            ex.printStackTrace();
        }
    }

    /**
     * Add project information to the string builder.
     *
     * @param builder
     *            Holding all information.
     * @param api
     *            {@link TestLinkAPI} object for getting project information.
     * @param indent
     *            Indention characters to use.
     */
    private static void addProjects(final StringBuilder builder, final TestLinkAPI api,
            final String indent) {

        try {

            final TestProject[] projects = api.getProjects();

            if ((null != projects) && (projects.length > 0)) {

                for (final TestProject project : projects) {

                    builder.append(project);
                    builder.append("\n");

                    // add all test plan(s)
                    TestLinkInfo.addTestPlans(builder, api, project.getId(),
                            (indent + TestLinkInfo.DEFAULT_INDENT));
                }
            } else {

                builder.append(" No projects defined!");
            }
        } catch (final Exception ex) {

            builder.append("!= Exception caught for getting project(s) for [ " + api + " ]");
        }
    }

    /**
     * Add test plan(s) to the string builder.
     *
     * @param builder
     *            Holding all information.
     * @param api
     *            {@link TestLinkAPI} object for getting project information.
     * @param projectId
     *            Project ID for which all test plan(s) are to retrieve.
     * @param indent
     *            Indention characters to use.
     */
    private static void addTestPlans(final StringBuilder builder, final TestLinkAPI api,
            final Integer projectId, final String indent) {

        try {

            builder.append("\n");

            final TestPlan[] plans = api.getProjectTestPlans(projectId);

            if ((null != plans) && (plans.length > 0)) {

                for (final TestPlan plan : plans) {

                    builder.append(indent);
                    builder.append(plan);
                    builder.append("\n");

                    TestLinkInfo.addTestSuites(builder, api, plan.getId(),
                            (indent + TestLinkInfo.DEFAULT_INDENT));

                    builder.append("\n");
                    TestLinkInfo.addBuilds(builder, api, plan.getId(),
                            (indent + TestLinkInfo.DEFAULT_INDENT));

                    final Map<String, Object> totalMap = api.getTotalsForTestPlan(plan.getId());

                    if ((null != totalMap) && (!totalMap.isEmpty())) {

                        builder.append("\n");
                        builder.append(indent);
                        builder.append(indent);
                        builder.append("Totals:\n");

                        for (final Entry<String, Object> entry : totalMap.entrySet()) {

                            builder.append(indent);
                            builder.append(indent);
                            builder.append(indent);
                            builder.append(entry.getKey());
                            builder.append(" = [ ");
                            builder.append(entry.getValue());
                            builder.append(" ]\n");
                        }
                    } else {

                        builder.append(indent);
                        builder.append(" No totals for plan available!");
                    }
                }
            } else {

                builder.append(indent);
                builder.append("No test plan(s) available!");
            }
        } catch (final Exception ex) {

            ex.printStackTrace();

            builder.append(indent);
            builder.append("!= Exception caught while trying to get test plan(s) [ "
                    + ex.getMessage() + " ]");
        }
    }

    /**
     * Add test suite(s) to the string builder.
     *
     * @param builder
     *            Holding all information.
     * @param api
     *            {@link TestLinkAPI} object for getting project information.
     * @param planId
     *            Test plan ID for which all test suite(s) are to retrieve.
     * @param indent
     *            Indention characters to use.
     */
    private static void addTestSuites(final StringBuilder builder, final TestLinkAPI api,
            final Integer planId, final String indent) {

        try {

            final TestSuite[] suites = api.getTestSuitesForTestPlan(planId);

            if ((null != suites) && (suites.length > 0)) {

                builder.append("\n");

                for (final TestSuite suite : suites) {

                    builder.append(indent);
                    builder.append(suite);
                    builder.append("\n");

                    TestLinkInfo.addTestCases(builder, api, suite.getId(),
                            (indent + TestLinkInfo.DEFAULT_INDENT));
                }
            } else {

                builder.append(indent);
                builder.append("No test suite(s) available!");
            }
        } catch (final Exception ex) {

            ex.printStackTrace();

            builder.append(indent);
            builder.append("!= Exception caught while trying to get test suite(s) [ "
                    + ex.getMessage() + " ]");
        }
    }

    /**
     * Add build(s) to the string builder.
     *
     * @param builder
     *            Holding all information.
     * @param api
     *            {@link TestLinkAPI} object for getting project information.
     * @param planId
     *            Test plan ID for which all test suite(s) are to retrieve.
     * @param indent
     *            Indention characters to use.
     */
    private static void addBuilds(final StringBuilder builder, final TestLinkAPI api,
            final Integer planId, final String indent) {

        try {

            final Build[] builds = api.getBuildsForTestPlan(planId);

            if ((null != builds) && (builds.length > 0)) {

                for (final Build build : builds) {

                    builder.append(indent);
                    builder.append(build);
                    builder.append("\n");
                }
            } else {

                builder.append(indent);
                builder.append("No build(s) available!");
            }
        } catch (final Exception ex) {

            ex.printStackTrace();

            builder.append(indent);
            builder.append("!= Exception caught while trying to get build(s) [ " + ex.getMessage()
                    + " ]");
        }
    }

    /**
     * Add test case(s) to the string builder.
     *
     * @param builder
     *            Holding all information.
     * @param api
     *            {@link TestLinkAPI} object for getting project information.
     * @param testSuiteId
     *            Test suite ID for which all test case(s) are to retrieve.
     * @param indent
     *            Indention characters to use.
     */
    private static void addTestCases(final StringBuilder builder, final TestLinkAPI api,
            final Integer testSuiteId, final String indent) {

        try {

            final TestCase[] cases = api.getTestCasesForTestSuite(testSuiteId, Boolean.TRUE, "full");

            if ((null != cases) && (cases.length > 0)) {

                for (final TestCase tcase : cases) {

                    builder.append(indent);
                    builder.append(tcase);
                    builder.append("\n");
                }
            } else {

                builder.append(indent);
                builder.append("No test case(s) available!");
            }
        } catch (final Exception ex) {

            ex.printStackTrace();

            builder.append(indent);
            builder.append("!= Exception caught while trying to get test case(s) [ "
                    + ex.getMessage() + " ]");
        }
    }

}
